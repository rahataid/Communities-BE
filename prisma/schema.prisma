// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TxnsStatus {
  SUCCESS
  PENDING
  FAILED
}

enum Gender {
  M
  F
  O
}

model Community {
  id                 Int            @id @default(autoincrement())
  name               String
  manager            String
  description        String?
  longitude          String?
  latitude           String?
  logo               String?        @default("")
  cover              String?        @default("")
  photos             String[]       @default([])
  budget             String?
  totalDOnations_usd String
  country            String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  summary            Demographics[]
  // donation    DonationTransaction[]
  tags               Tags[]         @relation("CommunityTagRelation")
}

model Tags {
  id          Int         @id @default(autoincrement())
  name        String
  communities Community[] @relation("CommunityTagRelation")
}

model Demographics {
  id                  Int           @id @default(autoincrement())
  communityId         Int
  total_beneficiaries String
  gender_male         String?
  gender_female       String?
  gender_other        String?
  bank_yes            String?
  bank_no             String?
  internet_yes        String
  internet_no         String
  // summaryType String
  extra               Json
  community           Community     @relation(fields: [communityId], references: [id])
  beneficiaries       Beneficiary[] @relation("BenficiaryDemographics")
}

model Beneficiary {
  id             Int          @id @default(autoincrement())
  gender         Gender
  walletAddress  String?
  age            Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  demographic    Demographics @relation("BenficiaryDemographics", fields: [demographicsId], references: [id])
  demographicsId Int
}

enum DonorType {
  organization
  individual
}

model Donor {
  id            Int       @id @default(autoincrement())
  name          String
  email         String
  donorType     DonorType
  walletAddress String
  phoneNumber   String
  // donations   DonationTransaction[]
}

model Transactions {
  id        Int        @id @default(autoincrement())
  status    TxnsStatus
  timestamp DateTime   @default(now())
  // donor   Donor      @relation(fields: [donorId], references: [id])
  donorId   Int
  // donee   Community  @relation(fields: [doneeId], references: [id])
  doneeId   Int
  txnHash   String?
  amount    Float
}
